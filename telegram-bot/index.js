const express = require('express');
const axios = require('axios');
const app = express();
app.use(express.json());

const TELEGRAM_API = `https://api.telegram.org/bot6789490938:AAFkhwkeeqrsyBTzE0I6uKAiKCSz0qjMWWs`;
const CHANNEL_ID = "@bmassk3_channel";
const IMAGE_URL = "https://duccodedao.github.io/web/logo-coin/IMG_1613.png";

let userData = {}; // L∆∞u d·ªØ li·ªáu UID, BMP, BMC, lastCheckin, address

function getToday7AM() {
  const now = new Date();
  now.setHours(7, 0, 0, 0);
  return now.getTime();
}

async function sendMenu(chatId, fullName) {
  const caption = `Xin ch√†o *${fullName}*.\nCh√†o m·ª´ng ƒë·∫øn v·ªõi Mini App c·ªßa BmassHD.`;
  await axios.post(`${TELEGRAM_API}/sendPhoto`, {
    chat_id: chatId,
    photo: IMAGE_URL,
    caption,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üß© Apps", url: "https://t.me/bmassk3_bot/?startapp=" },
          { text: "üì¢ Channel", url: "https://t.me/bmassk3_channel" }
        ],
        [{ text: "‚öôÔ∏è Ti·ªán √≠ch", callback_data: "utils" }]
      ]
    }
  });
}

app.post('/webhook', async (req, res) => {
  const body = req.body;

  // Khi nh·∫≠n tin nh·∫Øn
  if (body.message) {
    const chatId = body.message.chat.id;
    const fullName = `${body.message.from.first_name || ''} ${body.message.from.last_name || ''}`.trim();
    await sendMenu(chatId, fullName);
  }

  // Khi b·∫•m n√∫t
  if (body.callback_query) {
    const query = body.callback_query;
    const chatId = query.from.id;
    const uid = query.from.id.toString();

    // Kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng
    if (!userData[uid]) {
      userData[uid] = {
        bmp: 0,
        bmc: 0,
        lastCheckin: 0,
        address: null
      };
    }

    const data = query.data;

    // Quay l·∫°i menu ch√≠nh
    if (data === "back") {
      return await sendMenu(chatId, `${query.from.first_name || ''} ${query.from.last_name || ''}`);
    }

    // Hi·ªán ti·ªán √≠ch
    if (data === "utils") {
      return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
        chat_id: chatId,
        photo: IMAGE_URL,
        caption: `Ch·ªçn ti·ªán √≠ch b·∫°n mu·ªën s·ª≠ d·ª•ng`,
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚ö° Mua VIP", callback_data: "buy_vip" },
              { text: "üîë L·∫•y UID", callback_data: "get_uid" }
            ],
            [
              { text: "‚úÖ Check-in", callback_data: "checkin" },
              { text: "üí∞ S·ªë d∆∞", callback_data: "balance" }
            ],
            [
              { text: "üîÅ Swap BMP ‚Üí BMC", callback_data: "swap" },
              { text: "üì§ R√∫t BMC", callback_data: "withdraw" }
            ],
            [{ text: "üì¢ Referral", callback_data: "ref" }],
            [{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "back" }]
          ]
        }
      });
    }

    // L·∫•y UID
    if (data === "get_uid") {
      return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
        chat_id: chatId,
        photo: IMAGE_URL,
        caption: `UID c·ªßa b·∫°n l√†: \`${uid}\`\n·∫§n ƒë·ªÉ sao ch√©p`,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "utils" }]]
        }
      });
    }

    // Check-in
    if (data === "checkin") {
      const last = userData[uid].lastCheckin;
      const now = Date.now();
      const resetTime = getToday7AM();

      if (last >= resetTime) {
        return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
          chat_id: chatId,
          photo: IMAGE_URL,
          caption: "B·∫°n ƒë√£ check-in h√¥m nay r·ªìi. H√£y quay l·∫°i sau 7h s√°ng mai!",
          reply_markup: {
            inline_keyboard: [[{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "utils" }]]
          }
        });
      }

      userData[uid].bmp += 100;
      userData[uid].lastCheckin = now;

      return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
        chat_id: chatId,
        photo: IMAGE_URL,
        caption: "‚úÖ Check-in th√†nh c√¥ng!\n+100 BMP ƒë√£ ƒë∆∞·ª£c c·ªông v√†o t√†i kho·∫£n.",
        reply_markup: {
          inline_keyboard: [[{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "utils" }]]
        }
      });
    }

    // Xem s·ªë d∆∞
    if (data === "balance") {
      const bmp = userData[uid].bmp;
      const bmc = userData[uid].bmc;
      return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
        chat_id: chatId,
        photo: IMAGE_URL,
        caption: `S·ªë d∆∞ hi·ªán t·∫°i:\n‚Ä¢ BMP: *${bmp}*\n‚Ä¢ BMC: *${bmc}*`,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "utils" }]]
        }
      });
    }

    // Swap
    if (data === "swap") {
      const bmp = userData[uid].bmp;
      if (bmp < 10) {
        return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
          chat_id: chatId,
          photo: IMAGE_URL,
          caption: `B·∫°n c·∫ßn √≠t nh·∫•t 10 BMP ƒë·ªÉ swap.`,
          reply_markup: {
            inline_keyboard: [[{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "utils" }]]
          }
        });
      }
      const bmc = Math.floor(bmp / 10);
      userData[uid].bmp = 0;
      userData[uid].bmc += bmc;

      return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
        chat_id: chatId,
        photo: IMAGE_URL,
        caption: `ƒê√£ swap th√†nh c√¥ng!\nB·∫°n nh·∫≠n ƒë∆∞·ª£c *${bmc} BMC* t·ª´ *${bmc * 10} BMP*`,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "utils" }]]
        }
      });
    }

    // Mua VIP
    if (data === "buy_vip") {
      return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
        chat_id: chatId,
        photo: IMAGE_URL,
        caption: `T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn. Vui l√≤ng li√™n h·ªá @BmassK3 ƒë·ªÉ mua VIP.`,
        reply_markup: {
          inline_keyboard: [[{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "utils" }]]
        }
      });
    }

    // Referral
    if (data === "ref") {
      return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
        chat_id: chatId,
        photo: IMAGE_URL,
        caption: `Link gi·ªõi thi·ªáu c·ªßa b·∫°n:\nhttps://t.me/bmassk3_bot/?startapp=${uid}`,
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîó Share", url: `https://t.me/share/url?url=https://t.me/bmassk3_bot/?startapp=${uid}` }],
            [{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "utils" }]
          ]
        }
      });
    }

    // R√∫t BMC
    if (data === "withdraw") {
      if (userData[uid].bmc < 1000) {
        return await axios.post(`${TELEGRAM_API}/sendPhoto`, {
          chat_id: chatId,
          photo: IMAGE_URL,
          caption: `B·∫°n c·∫ßn √≠t nh·∫•t *1000 BMC* ƒë·ªÉ r√∫t.\nH√£y th·ª≠ *Swap BMP ‚Üí BMC* n·∫øu ƒë·ªß.`,
          parse_mode: "Markdown",
          reply_markup: [[{ text: "‚óÄÔ∏è Quay l·∫°i", callback_data: "utils" }]]
        });
      }

      return await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: chatId,
        text: `Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ v√≠ TON c·ªßa b·∫°n ƒë·ªÉ r√∫t BMC.`,
      });
    }

    // (B·∫°n c√≥ th·ªÉ b·ªï sung ti·∫øp ph·∫ßn x√°c nh·∫≠n, nh·∫≠p ƒë·ªãa ch·ªâ, g·ª≠i v·ªÅ channel n·∫øu mu·ªën)

  }

  res.sendStatus(200);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Bot running on port ${PORT}`);
});
